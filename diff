diff --git a/client/sources/main.cpp b/client/sources/main.cpp
index b190b7b..ff2bff5 100644
--- a/client/sources/main.cpp
+++ b/client/sources/main.cpp
@@ -17,7 +17,8 @@ void runGame(std::unique_ptr<engine::IGame> _game)
 
     game->registerAllComponents(reg);
     game->initAssets(reg);
-    game->initScene(reg);
+    if (game->isClientScene())
+        game->initScene(reg);
     game->registerAdditionalSystems(reg);
     game->registerAdditionalClientSystems(reg);
 
diff --git a/libs/engine/includes/IGame.hpp b/libs/engine/includes/IGame.hpp
index ae843c9..d37aa3d 100644
--- a/libs/engine/includes/IGame.hpp
+++ b/libs/engine/includes/IGame.hpp
@@ -66,6 +66,16 @@ public:
         return nullptr;
     }
 
+    /**
+     * @brief Check if the game draws the scene client side
+     *
+     * @return true if the scene is created client-side, false by default
+     */
+    virtual bool isClientScene() const
+    {
+        return false;
+    }
+
     /**
      * @brief The exception thrown when the game should start after the lobby
      *
diff --git a/libs/networking/sources/Sync.cpp b/libs/networking/sources/Sync.cpp
index 7362719..493b220 100644
--- a/libs/networking/sources/Sync.cpp
+++ b/libs/networking/sources/Sync.cpp
@@ -190,7 +190,7 @@ static std::vector<std::byte> constructUpdatePacket(
 
     size_t size = serializer.getSize();
     net::diffSnapshots(serializer, previous, current);
-    if (serializer.getSize() == size) {
+    if (serializer.getSize() == size && previous.tick != 0) {
         return {}; // no update
     }
     return serializer.finalize();
diff --git a/libs/rtype/sources/Game.hpp b/libs/rtype/sources/Game.hpp
index 8ae1cab..4f1f221 100644
--- a/libs/rtype/sources/Game.hpp
+++ b/libs/rtype/sources/Game.hpp
@@ -104,6 +104,8 @@ public:
 
     void onJoinSuccess(std::uint8_t playerNumber, std::uint64_t playerHash);
 
+    bool isClientScene() const override { return true; }
+
 private:
     /// The reference to the game
     RTypeGame &_game;
diff --git a/libs/rtype/sources/RTypeGame.cpp b/libs/rtype/sources/RTypeGame.cpp
index f4ebd3d..b0c3f3d 100644
--- a/libs/rtype/sources/RTypeGame.cpp
+++ b/libs/rtype/sources/RTypeGame.cpp
@@ -141,7 +141,7 @@ void RTypeGame::initScene(engine::Registry &reg)
         background,
         Component::Position(
             float(rendering::system::SCREEN_WIDTH) / 2,
-            float(rendering::system::SCREEN_HEIGHT) / 2, 0
+            float(rendering::system::SCREEN_HEIGHT) / 2, -10
         )
     );
     // midground
@@ -149,7 +149,7 @@ void RTypeGame::initScene(engine::Registry &reg)
         midground,
         Component::Position(
             float(rendering::system::SCREEN_WIDTH) / 2,
-            float(rendering::system::SCREEN_HEIGHT) / 2, 0
+            float(rendering::system::SCREEN_HEIGHT) / 2, -9
         )
     );
     // foreground
@@ -157,23 +157,23 @@ void RTypeGame::initScene(engine::Registry &reg)
         foreground,
         Component::Position(
             float(rendering::system::SCREEN_WIDTH) / 2,
-            float(rendering::system::SCREEN_HEIGHT) / 2, 0
+            float(rendering::system::SCREEN_HEIGHT) / 2, -8
         )
     );
     // player
     reg.get_components<Component::Position>().insert_at(
-        player, Component::Position(150, 150, 1)
+        player, Component::Position(150, 150, 0)
     );
     // topBorder
     reg.get_components<Component::Position>().insert_at(
-        topBorder, Component::Position(0, 0, 1)
+        topBorder, Component::Position(0, 0, -7)
     );
     // bottomBorder
     reg.get_components<Component::Position>().insert_at(
         bottomBorder,
         Component::Position(
             float(rendering::system::SCREEN_WIDTH) / 2,
-            float(rendering::system::SCREEN_HEIGHT) - float(BORDERS_H) / 2, 1
+            float(rendering::system::SCREEN_HEIGHT) - float(BORDERS_H) / 2, -7
         )
     );
 
diff --git a/server/sources/main.cpp b/server/sources/main.cpp
index 315bfb4..25c8202 100644
--- a/server/sources/main.cpp
+++ b/server/sources/main.cpp
@@ -17,7 +17,8 @@ void runGame(std::unique_ptr<engine::IGame> _game)
 
     game->registerAllComponents(reg);
     game->initAssets(reg);
-    game->initScene(reg);
+    if (not game->isClientScene())
+        game->initScene(reg);
     game->registerAdditionalSystems(reg);
     game->registerAdditionalServerSystems(reg);
 
